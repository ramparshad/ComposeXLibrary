package com.example.jcmodule

import androidx.compose.animation.AnimatedContent
import androidx.compose.animation.AnimatedVisibility
import androidx.compose.animation.ExperimentalAnimationApi
import androidx.compose.animation.animateColorAsState
import androidx.compose.animation.core.LinearEasing
import androidx.compose.animation.core.RepeatMode
import androidx.compose.animation.core.animateFloat
import androidx.compose.animation.core.infiniteRepeatable
import androidx.compose.animation.core.rememberInfiniteTransition
import androidx.compose.animation.core.tween
import androidx.compose.animation.expandHorizontally
import androidx.compose.animation.fadeIn
import androidx.compose.animation.fadeOut
import androidx.compose.animation.scaleIn
import androidx.compose.animation.scaleOut
import androidx.compose.animation.shrinkHorizontally
import androidx.compose.animation.slideInVertically
import androidx.compose.animation.slideOutVertically
import androidx.compose.animation.with
import androidx.compose.foundation.ScrollState
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.KeyboardActions
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material.icons.filled.Close
import androidx.compose.material.icons.filled.Favorite
import androidx.compose.material.icons.filled.Menu
import androidx.compose.material.icons.filled.MoreVert
import androidx.compose.material.icons.filled.Search
import androidx.compose.material.icons.filled.Share
import androidx.compose.material3.CenterAlignedTopAppBar
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.FloatingActionButton
import androidx.compose.material3.FloatingActionButtonDefaults
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.material3.TextField
import androidx.compose.material3.TextFieldDefaults
import androidx.compose.material3.TopAppBarDefaults
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.drawWithContent
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.focus.FocusRequester
import androidx.compose.ui.focus.focusRequester
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.graphicsLayer
import androidx.compose.ui.graphics.lerp
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.platform.LocalDensity
import androidx.compose.ui.platform.LocalSoftwareKeyboardController
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.ImeAction
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.unit.Dp
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import kotlin.math.abs
import androidx.compose.foundation.*
import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.width
import androidx.compose.ui.draw.clip
import kotlin.math.min


@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun AnimatedTopAppBar(
    title: String,
    searchQuery: String,
    onSearchQueryChanged: (String) -> Unit,
    modifier: Modifier = Modifier,
    searchActive: Boolean = false,
    onSearchActiveChange: (Boolean) -> Unit = {},
    menuIcon: ImageVector = Icons.Default.Menu,
    searchIcon: ImageVector = Icons.Default.Search,
    backIcon: ImageVector = Icons.Default.ArrowBack,
    clearIcon: ImageVector = Icons.Default.Close,
    iconSize: Dp = 28.dp,
    iconColor: Color = MaterialTheme.colorScheme.onSurface,
    animationDuration: Int = 300,
    titleStyle: TextStyle = MaterialTheme.typography.titleLarge,
    searchFieldStyle: TextStyle = MaterialTheme.typography.bodyLarge,
    containerColor: Color = MaterialTheme.colorScheme.surfaceVariant,
    contentColor: Color = MaterialTheme.colorScheme.onSurface,
    searchFieldColor: Color = MaterialTheme.colorScheme.onSurface,
    elevation: Dp = 4.dp,
    onMenuClick: () -> Unit = {},
    onSearchToggle: (Boolean) -> Unit = {}
) {
    val keyboardController = LocalSoftwareKeyboardController.current
    val focusRequester = remember { FocusRequester() }

    CenterAlignedTopAppBar(
        title = {
        Row(
            verticalAlignment = Alignment.CenterVertically, modifier = Modifier.fillMaxWidth()
        ) {
            AnimatedVisibility(
                visible = !searchActive,
                enter = fadeIn() + expandHorizontally(animationSpec = tween(animationDuration)),
                exit = fadeOut() + shrinkHorizontally(animationSpec = tween(animationDuration)),
                modifier = Modifier.weight(1f)
            ) {
                Text(
                    text = title, style = titleStyle, color = contentColor
                )
            }

            AnimatedVisibility(
                visible = searchActive,
                enter = fadeIn() + expandHorizontally(animationSpec = tween(animationDuration)),
                exit = fadeOut() + shrinkHorizontally(animationSpec = tween(animationDuration)),
                modifier = Modifier.weight(1f)
            ) {
                TextField(
                    value = searchQuery,
                    onValueChange = onSearchQueryChanged,
                    modifier = Modifier
                        .fillMaxWidth()
                        .focusRequester(focusRequester),
                    placeholder = {
                        Text(
                            "Search...",
                            style = searchFieldStyle,
                            color = contentColor.copy(alpha = 0.7f)
                        )
                    },
                    colors = TextFieldDefaults.colors(
                        focusedContainerColor = Color.Transparent,
                        unfocusedContainerColor = Color.Transparent,
                        focusedIndicatorColor = Color.Transparent,
                        unfocusedIndicatorColor = Color.Transparent,
                        focusedTextColor = searchFieldColor,
                        unfocusedTextColor = searchFieldColor
                    ),
                    textStyle = searchFieldStyle,
                    keyboardOptions = KeyboardOptions(imeAction = ImeAction.Search),
                    keyboardActions = KeyboardActions(
                        onSearch = { keyboardController?.hide() }),
                    singleLine = true)
            }
        }
    }, navigationIcon = {
        IconButton(
            onClick = {
                if (searchActive) {
                    onSearchActiveChange(false)
                    onSearchToggle(false)
                    onSearchQueryChanged("")
                    keyboardController?.hide()
                } else {
                    onMenuClick()
                    onSearchToggle(false)
                }
            }) {
            Icon(
                imageVector = if (searchActive) backIcon else menuIcon,
                contentDescription = if (searchActive) "Back" else "Menu",
                tint = iconColor,
                modifier = Modifier.size(iconSize)
            )
        }
    }, actions = {
        AnimatedVisibility(
            visible = !searchActive,
            enter = fadeIn(animationSpec = tween(animationDuration)),
            exit = fadeOut(animationSpec = tween(animationDuration))
        ) {
            IconButton(
                onClick = {
                    onSearchActiveChange(true)
                    onSearchToggle(true)
                }) {
                Icon(
                    imageVector = searchIcon,
                    contentDescription = "Search",
                    tint = iconColor,
                    modifier = Modifier.size(iconSize)
                )
            }
        }

        AnimatedVisibility(
            visible = searchActive && searchQuery.isNotEmpty(),
            enter = fadeIn(animationSpec = tween(animationDuration)),
            exit = fadeOut(animationSpec = tween(animationDuration))
        ) {
            IconButton(
                onClick = {
                    onSearchQueryChanged("")
                }) {
                Icon(
                    imageVector = clearIcon,
                    contentDescription = "Clear",
                    tint = iconColor,
                    modifier = Modifier.size(iconSize)
                )
            }
        }
    }, colors = TopAppBarDefaults.centerAlignedTopAppBarColors(
        containerColor = containerColor,
        navigationIconContentColor = contentColor,
        actionIconContentColor = contentColor,
        titleContentColor = contentColor
    ), modifier = modifier
    )

    LaunchedEffect(searchActive) {
        if (searchActive) {
            focusRequester.requestFocus()
            keyboardController?.show()
        }
    }
}

/**
 * State holder for AnimatedSearchAppBar with additional control methods
 */
class AnimatedSearchAppBarState(
    initialSearchActive: Boolean = false, initialSearchQuery: String = ""
) {
    var searchActive by mutableStateOf(initialSearchActive)
    var searchQuery by mutableStateOf(initialSearchQuery)

    fun toggleSearch() {
        searchActive = !searchActive
        if (!searchActive) searchQuery = ""
    }

    fun showSearch() {
        searchActive = true
    }

    fun hideSearch() {
        searchActive = false
        searchQuery = ""
    }
}

/**
 * Creates and remembers an AnimatedSearchAppBarState
 */
@Composable
fun rememberAnimatedSearchAppBarState(
    initialSearchActive: Boolean = false, initialSearchQuery: String = ""
): AnimatedSearchAppBarState {
    return remember { AnimatedSearchAppBarState(initialSearchActive, initialSearchQuery) }
}

//----------------------------------------------------------------------------------------------



/**
 * A highly customizable liquid motion app bar that reacts to scroll and provides rich animations.
 *
 * @param scrollState Scroll state to track for motion effects
 * @param title The title to display
 * @param onActionClick Callback when action buttons are clicked
 * @param modifier Modifier for the app bar
 * @param scrollThreshold The scroll distance needed to fully transform the app bar (in Dp)
 * @param initialHeight Initial height of the app bar
 * @param collapsedHeight Height when scrolled
 * @param initialElevation Initial elevation
 * @param collapsedElevation Elevation when scrolled
 * @param initialCornerRadius Initial corner radius
 * @param collapsedCornerRadius Corner radius when scrolled
 * @param startColor Initial background color
 * @param endColor Background color when scrolled
 * @param titleStyle Style for the title text
 * @param collapsedTitleStyle Style for the title when collapsed
 * @param waveEffectEnabled Whether to enable the wave animation effect
 * @param waveColor Color for the wave effect
 * @param waveDuration Duration of wave animation in ms
 * @param actions List of action buttons to display
 * @param actionIconSize Size of action icons
 * @param showCollapsedMenu Whether to show the collapsed menu button
 * @param borderEffectEnabled Whether to show the bottom border effect
 * @param borderColor Color for the bottom border
 */
@OptIn(ExperimentalMaterial3Api::class, ExperimentalAnimationApi::class)
@Composable
fun LiquidMotionAppBar(
    scrollState: ScrollState,
    title: String,
    onActionClick: (String) -> Unit,
    modifier: Modifier = Modifier,
    
    leadingIcon: ImageVector? = Icons.Default.ArrowBack,
    onLeadingIconClick: (() -> Unit)? = null,
    leadingIconColor: Color = MaterialTheme.colorScheme.onSurface,
    leadingIconSize: Dp = 24.dp,
    showLeadingIcon: Boolean = true,
    // Title Alignment Properties
    titleAlignment: Alignment.Horizontal = Alignment.Start,
    titleVerticalAlignment: Alignment.Vertical = Alignment.CenterVertically,
    titlePadding: PaddingValues = PaddingValues(horizontal = 16.dp),
    // Existing Properties
    scrollThreshold: Dp = 150.dp,
    initialHeight: Dp = 96.dp,
    collapsedHeight: Dp = 72.dp,
    initialElevation: Dp = 0.dp,
    collapsedElevation: Dp = 12.dp,
    initialCornerRadius: Dp = 0.dp,
    collapsedCornerRadius: Dp = 24.dp,
    startColor: Color = MaterialTheme.colorScheme.primaryContainer,
    endColor: Color = MaterialTheme.colorScheme.surface,
    titleStyle: TextStyle = MaterialTheme.typography.headlineSmall.copy(
        fontWeight = FontWeight.ExtraBold,
        letterSpacing = 0.5.sp
    ),
    collapsedTitleStyle: TextStyle = MaterialTheme.typography.titleLarge.copy(
        fontWeight = FontWeight.Bold
    ),
    waveEffectEnabled: Boolean = true,
    waveColor: Color = MaterialTheme.colorScheme.primary.copy(alpha = 0.3f),
    waveDuration: Int = 2000,
    actions: List<ActionItem> = defaultActions(),
    actionIconSize: Dp = 24.dp,
    showCollapsedMenu: Boolean = true,
    borderEffectEnabled: Boolean = true,
    borderColor: Color = MaterialTheme.colorScheme.primary
) {
    val scrollThresholdPx = with(LocalDensity.current) { scrollThreshold.toPx() }
    val scrollProgress = min(1f, abs(scrollState.value) / scrollThresholdPx)

    // Dynamic properties based on scroll
    val (elevation, height, cornerRadius) = remember(scrollProgress) {
        Triple(
            lerp(initialElevation, collapsedElevation, scrollProgress),
            lerp(initialHeight, collapsedHeight, scrollProgress),
            lerp(initialCornerRadius, collapsedCornerRadius, scrollProgress)
        )
    }

    // Color interpolation
    val bgColor by animateColorAsState(
        targetValue = lerp(startColor, endColor, scrollProgress),
        animationSpec = tween(500)
    )

    // Wave effect animation
    val infiniteTransition = rememberInfiniteTransition()
    val waveOffset by infiniteTransition.animateFloat(
        initialValue = 0f,
        targetValue = 100f,
        animationSpec = infiniteRepeatable(
            animation = tween(waveDuration, easing = LinearEasing),
            repeatMode = RepeatMode.Reverse
        )
    )

    Surface(
        modifier = modifier
            .fillMaxWidth()
            .height(height)
            .shadow(elevation, shape = RoundedCornerShape(cornerRadius))
            .clip(RoundedCornerShape(cornerRadius))
    ) {
        Box(
            modifier = Modifier
                .fillMaxSize()
                .drawWithContent {
                    drawContent()
                    if (waveEffectEnabled) {
                        drawRect(
                            brush = Brush.linearGradient(
                                colors = listOf(waveColor, Color.Transparent),
                                start = Offset(waveOffset, 0f),
                                end = Offset(waveOffset + 200f, 0f)
                            ),
                            alpha = 0.2f
                        )
                    }
                }
                .background(bgColor)
        ) {
            // Title Row with leading icon
            Row(
                modifier = Modifier
                    .align(Alignment.Custom(titleAlignment, titleVerticalAlignment))
                    .padding(titlePadding),
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.Start
            ) {
                // Leading Icon
                if (showLeadingIcon && leadingIcon != null) {
                    IconButton(
                        onClick = { onLeadingIconClick?.invoke() },
                        modifier = Modifier
                            .size(lerp(48.dp, 40.dp, scrollProgress))
                            .graphicsLayer {
                                alpha = 1f - (scrollProgress * 0.3f)
                            }
                    ) {
                        Icon(
                            imageVector = leadingIcon,
                            contentDescription = "Back",
                            tint = leadingIconColor,
                            modifier = Modifier.size(leadingIconSize)
                        )
                    }
                    Spacer(modifier = Modifier.width(8.dp))
                }

                // Animated Title
                AnimatedContent(
                    targetState = scrollProgress > 0.5f,
                    transitionSpec = {
                        fadeIn(animationSpec = tween(300)) +
                                slideInVertically { -it } with
                                fadeOut(animationSpec = tween(300)) +
                                slideOutVertically { it }
                    }
                ) { collapsed ->
                    Text(
                        text = if (collapsed) "⋮ $title" else title,
                        modifier = Modifier
                            .graphicsLayer {
                                alpha = 1f - (scrollProgress * 0.5f)
                                scaleX = lerp(1f, 0.9f, scrollProgress)
                                scaleY = lerp(1f, 0.9f, scrollProgress)
                            },
                        style = if (collapsed) collapsedTitleStyle else titleStyle,
                        maxLines = 1,
                        overflow = TextOverflow.Ellipsis
                    )
                }
            }

            // Rest of your existing code for actions and border...
            Row(
                modifier = Modifier
                    .align(Alignment.CenterEnd)
                    .padding(end = 16.dp),
                horizontalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                actions.forEach { action ->
                    FloatingActionButton(
                        onClick = { onActionClick(action.id) },
                        modifier = Modifier
                            .size(lerp(48.dp, 40.dp, scrollProgress))
                            .graphicsLayer {
                                rotationZ = lerp(0f, 5f, scrollProgress)
                                alpha = 1f - (scrollProgress * 0.7f)
                            },
                        containerColor = action.containerColor
                            ?: MaterialTheme.colorScheme.tertiaryContainer,
                        elevation = FloatingActionButtonDefaults.elevation(
                            defaultElevation = lerp(4.dp, 2.dp, scrollProgress))
                    ) {
                    Icon(
                        imageVector = action.icon,
                        contentDescription = action.label,
                        tint = action.iconColor ?: MaterialTheme.colorScheme.onTertiaryContainer,
                        modifier = Modifier.size(actionIconSize)
                    )
                }
                }

                if (showCollapsedMenu) {
                    AnimatedVisibility(
                        visible = scrollProgress > 0.7f,
                        enter = fadeIn() + scaleIn(),
                        exit = fadeOut() + scaleOut()
                    ) {
                        FloatingActionButton(
                            onClick = { onActionClick("menu") },
                            modifier = Modifier.size(40.dp),
                            containerColor = MaterialTheme.colorScheme.secondaryContainer
                        ) {
                            Icon(
                                imageVector = Icons.Default.MoreVert,
                                contentDescription = "Menu",
                                tint = MaterialTheme.colorScheme.onSecondaryContainer,
                                modifier = Modifier.size(actionIconSize)
                            )
                        }
                    }
                }
            }

            if (borderEffectEnabled) {
                Box(
                    modifier = Modifier
                        .align(Alignment.BottomStart)
                        .fillMaxWidth()
                        .height(2.dp)
                        .graphicsLayer {
                            scaleX = lerp(1f, 0.7f, scrollProgress)
                        }
                        .background(
                            Brush.horizontalGradient(
                                colors = listOf(borderColor, Color.Transparent),
                                startX = 0f,
                                endX = 300f
                            )
                        )
                )
            }
        }
    }
}


/**
 * Data class representing an action button in the app bar
 * @param id Unique identifier for the action
 * @param icon The icon to display
 * @param label Content description for accessibility
 * @param containerColor Color of the button
 * @param iconColor Color of the icon
 */
data class ActionItem(
    val id: String,
    val icon: ImageVector,
    val label: String,
    val containerColor: Color? = null,
    val iconColor: Color? = null
)

/**
 * Default actions for the app bar
 */
@Composable
fun defaultActions(): List<ActionItem> = listOf(
    ActionItem(
        id = "search",
        icon = Icons.Default.Search,
        label = "Search",
        containerColor = MaterialTheme.colorScheme.tertiaryContainer
    ),
    ActionItem(
        id = "favorite",
        icon = Icons.Default.Favorite,
        label = "Favorite",
        containerColor = MaterialTheme.colorScheme.errorContainer
    ),
    ActionItem(
        id = "share",
        icon = Icons.Default.Share,
        label = "Share",
        containerColor = MaterialTheme.colorScheme.primaryContainer
    )
)

/**
 * State holder for LiquidMotionAppBar
 */
class LiquidMotionAppBarState(scrollState: ScrollState) {
    var scrollState by mutableStateOf(scrollState)
    var isCollapsed by mutableStateOf(false)

    fun updateScroll(newScrollState: ScrollState) {
        scrollState = newScrollState
        isCollapsed = scrollState.value > 0
    }
}

@Composable
fun rememberLiquidMotionAppBarState(
    scrollState: ScrollState = rememberScrollState()
): LiquidMotionAppBarState {
    return remember { LiquidMotionAppBarState(scrollState) }
}

// Helper functions
private fun lerp(start: Dp, stop: Dp, fraction: Float): Dp {
    return (start + (stop - start) * fraction)
}

private fun lerp(start: Float, stop: Float, fraction: Float): Float {
    return (start + (stop - start) * fraction)
}

private fun lerp(start: Int, stop: Int, fraction: Float): Int {
    return (start + (stop - start) * fraction).toInt()
}

private fun lerp(start: Color, stop: Color, fraction: Float): Color {
    return Color(
        lerp(start.red, stop.red, fraction),
        lerp(start.green, stop.green, fraction),
        lerp(start.blue, stop.blue, fraction),
        lerp(start.alpha, stop.alpha, fraction)
    )
}


